# <>  must choose
# []  can choose
# {}  can repeat 0 to infinite time(s)
# |   or
# ::= is defined as

<number> ::= <token_number>
<string> ::= <token_string>
<nil> ::= <token_reserve_word_nil>
<id> ::= <token_identifier>
<dynamic_id> ::= <token_dynamic_id>

<vector> ::= <[> {<scalar> <,>} <]>
<hash> ::= <{> {(<id> | <string>) <:> <scalar> <,>} <}>
<scalar> ::=
    <number>
|   <nil>
|   <string>
|   <call_identifier>
|   <calculation>
|   <function>
|   <(> <scalar> <)>
|   <hash>
|   <vector>

<function> ::=
    <func> [<(> <)>] <statement>
|   <func> [<(> <)>] <{> {<statement> <;>} <}>
|   <func> <(> {<id> <,>} {<id> <=> <scalar> <,>} {<dynamic_id>} <)> <statement>
|   <func> <(> {<id> <,>} {<id> <=> <scalar> <,>} {<dynamic_id>} <)> <{> {<statement> <;>} <}>

<call_identifier> ::=
    <scalar> { (<[> {<scalar> <,>} <]>) | (<[> <scalar> <:> [<scalar>] <]>) | (<.> <id>) | (<(> {<scalar> <,>} <)>) | (<(> {<id> <:> <scalar> <,>} <)>) }
|   <id> { (<[> {<scalar> <,>} <]>) | (<[> <scalar> <:> [<scalar>] <]>) | (<.> <id>) | (<(> {<scalar> <,>} <)>) | (<(> {<id> <:> <scalar> <,>} <)>) }
|   <func> <id>
|   <func> <id> <(>  <)> { (<[> {<scalar> <,>} <]>) | (<[> <scalar> <:> [<scalar>] <]>) | (<.> <id>) | (<(> {<scalar> <,>} <)>) | (<(> {<id> <:> <scalar> <,>} <)>) }

<calculation> ::=
    <and_calc>
|   <or_calc>
|   <additive_calc>
|   <multive_calc>
|   <scalar>
<and_calc> ::=
    <or_calc> {<and> <or_calc>}
<or_calc> ::=
    <additive_calc> {<or> <additive_calc>}
<additive_calc> ::=
    <multive_calc> {<+>|<->|<~> <multive_calc>}
<multive_calc> ::=
    <scalar> {<*>|</> <scalar>}

<definition> ::=
    <var> <id>
|   <var> <id> <=> <scalar>
|   <var> <(> {(<id>) | (<call_identifier>) <,>} <)> <=> <scalar>
|   <(> <var> {(<id>) | (<call_identifier>) <,>} <)> <=> <scalar>
|   <var> <(> {(<id>) | (<call_identifier>) <,>} <)> <=> <(> {<scalar> <,>} <)>
|   <(> <var> {(<id>) | (<call_identifier>) <,>} <)> <=> <(> {<scalar> <,>} <)>
<assignment> ::=
    <call_identifier> <=> <scalar>
|   <(> {<call_identifier> <,>} <)> <=> <scalar>
|   <(> {<call_identifier> <,>} <)> <=> <(> {<scalar> <,>} <)>
<loop_expr> ::=
    <for_loop>
|   <while_loop>
|   <forindex_loop>
|   <foreach_loop>
<for_loop> ::=
    <for> <(> [<statement>] <;> [<scalar>] <;> <statement> <)> <statement> [<;>]
|   <for> <(> [<statement>] <;> [<scalar>] <;> <statement> <)> <{> {<statement> <;>} <}>
<while_loop> ::=
    <while> <(> <scalar> <)> <statement> [<;>]
|   <while> <(> <scalar> <)> <{> {<statement> <;>} <}>
<forindex_loop> ::=
    <forindex> <(> [<statement] <;> [<scalar>] <)> <statement> [<;>]
|   <forindex> <(> [<statement] <;> [<scalar>] <)> <{> {<statement> <;>} <}>
<foreach_loop> ::=
    <foreach> <(> [<statement] <;> [<scalar>] <)> <statement> [<;>]
|   <foreach> <(> [<statement] <;> [<scalar>] <)> <{> {<statement> <;>} <}>

<choose_expr> ::= <choose_expr_if> {<choose_expr_elsif>} [<choose_expr_else>]
<choose_expr_if> ::=
    <if> <(> <scalar> <)> <statement> [<;>]
|   <if> <(> <scalar> <)> <{> {<statement> <;>} <}>
<choose_expr_elsif> ::=
    <elsif> <(> <scalar> <)> <statement> [<;>]
|   <elsif> <(> <scalar> <)> <{> {<statement> <;>} <}>
|   <else> <if> <(> <scalar> <)> <statement> [<;>]
|   <else> <if> <(> <scalar> <)> <{> {<statement> <;>} <}>
<choose_expr_else> ::=
    <else> <statement> [<;>]
|   <else> <{> {<statement> <;>} <}>

<continue_expr> ::= <continue>
<break_expr> ::= <break>
<return_expr> ::= <return> [<scalar>]
<statement> ::=
    <definition>
|   <assignment>
|   <choose_expr>
|   <loop_expr>
|   <continue_expr>
|   <break_expr>
|   <return_expr>